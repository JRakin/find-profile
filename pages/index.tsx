import type { NextPage } from 'next';
import Head from 'next/head';
import * as React from 'react';
import { useState } from 'react';
import Footer from '../components/common/footer';
import Hint from "../components/common/hint";
import SearchInput from '../components/common/search.input';
import DataArea from '../components/data-area';
import styles from '../styles/Home.module.css';
import { isValidHttpUrl } from '../Utils/crunchUrls';
import { PostData } from '../Utils/fetchData';
import { getGithubInfoByName, getRepoList, githubDataType } from "../Utils/github";
interface hackerRankDataType {
  linkedin_url: string
  github_url: string
  leetcode_url: string
  country: string
  languages: string[]
  avatar: string
  name: string
}
const initialState = {
  searchVal: '',
  hackerrank: {
    linkedin_url: '', github_url: "", leetcode_url: '', country: '', languages: [], avatar: '', name: ''
  },
  github: {
    blog: "", email: "", avatar_url: "",
    topRepos: [

    ]
  }


}


const domainList: any = {
  "hackerrank": {
    name: "hackerrank",
    userInfoApi: "https://www.hackerrank.com/rest/contests/master/hackers/userName/profile",
  },
  "github": {
    name: "github",
    userInfoApi: "https://api.github.com/users/userName",
    repoListApi: "https://api.github.com/users/userName/repos"
  }
}
const Home: NextPage = () => {

  const [userInfo, setUserInfo] = useState<{
    searchVal: string,
    hackerrank: hackerRankDataType,
    github: githubDataType
  }>(initialState)



  const getHackerRankInfo = React.useCallback(async (nameFromUrl: string) => {
    const getUserProfileApi = domainList.hackerrank.userInfoApi
    const userProfileApi = getUserProfileApi.replace('userName', nameFromUrl)
    const postApiForwardingApi = '/api/forward-api'
    const data: any = await PostData(postApiForwardingApi, userProfileApi)
    const hackerRankdata: hackerRankDataType = data?.model || {}

    const { linkedin_url = '', country = '', github_url = "", languages = [], avatar = '', leetcode_url = '', name = '' } = hackerRankdata

    setUserInfo(prevState => {
      return {
        ...prevState,
        hackerrank: {
          linkedin_url, country, github_url, languages, avatar, leetcode_url, name
        }
      }
    })

    return hackerRankdata
  }, [])


  const getGithubData = React.useCallback(async (name: string) => {

    const getRepoListApi = domainList.github.repoListApi.replace('userName', name)
    const userProfileApi = domainList.github.userInfoApi.replace('userName', name)

    const [gitHubBasicInfo, githubRepos] = await Promise.all([getGithubInfoByName(userProfileApi), getRepoList(getRepoListApi)])
    setUserInfo(prevState => {
      return {
        ...prevState,
        github: {
          ...gitHubBasicInfo,
          topRepos: githubRepos
        }
      }
    })
  }, [])


  const searchInputHandler = async (searchVal: string) => {

    setUserInfo(prevState => {
      return {
        ...prevState,
        searchVal
      }
    })


    const isValidUrl = isValidHttpUrl(searchVal)
    if (!isValidUrl) {
      console.log("not a url")

      getGithubData(searchVal)
      getHackerRankInfo(searchVal);
      return

    }

    const myUrl = new URL(searchVal)
    // const parts = ['protocol', 'hostname', 'pathname'];

    const domain = myUrl.hostname
    let pathname = myUrl.pathname
    if (pathname.substr(-1) === "/") pathname = pathname.slice(0, -1);
    const nameFromUrl = pathname.split("/").pop()


    if (!nameFromUrl) {
      console.log("no name found")
      return
    }


    if ((new RegExp("hackerrank.com")).test(domain)) {
      const { github_url } = await getHackerRankInfo(nameFromUrl)
      const githubUserName = github_url?.split("/").pop() || nameFromUrl
      getGithubData(githubUserName)

    } else if ((new RegExp("github.com")).test(domain)) {
      getHackerRankInfo(nameFromUrl);
      getGithubData(nameFromUrl)
    }
    return
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Find Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.seachContainer}>
          <SearchInput callback={searchInputHandler} />

        </div>

        {!userInfo.searchVal && <Hint />}

        <DataArea userInfo={userInfo} />
      </main>


      <Footer />
    </div >
  )
}

export default Home



